defaults:
  - task: square_image_abs

name: train_cm_student

task_name: ${task.name}
shape_meta: ${task.shape_meta}
exp_name: "debug"

horizon: 16
n_obs_steps: 2
n_action_steps: 8
n_latency_steps: 0
dataset_obs_steps: ${n_obs_steps}
keypoint_visible_rate: 1.0
obs_as_global_cond: Trued
use_consistency_model: True
past_action_visible: False

teacher_ckpt: /home/clear/stochastic_consistency_policy/diffusion_policy_stanford/useful_chckpoint/DDIM/epoch=0900-test_mean_score=0.860.ckpt

policy:
  _target_: diffusion_policy.policy.manicm_student_cm_policy.ManiCMStudentPolicy
  teacher_path: /home/clear/stochastic_consistency_policy/diffusion_policy_stanford/useful_chckpoint/DDIM/epoch=0900-test_mean_score=0.860.ckpt
  shape_meta: ${shape_meta}
  
  noise_scheduler:
    _target_: diffusers.schedulers.scheduling_ddpm.DDPMScheduler
    num_train_timesteps: 100
    beta_start: 0.0001
    beta_end: 0.02
    beta_schedule: squaredcos_cap_v2
    variance_type: fixed_small # Yilun's paper uses fixed_small_log instead, but easy to cause Nan
    clip_sample: True # required when predict_epsilon=False
    prediction_type: sample # or epsilon

  scheduler:
    _target_: diffusers.schedulers.scheduling_lcm.LCMScheduler
    num_train_timesteps: 100
    beta_start: 0.0001
    beta_end: 0.02
    beta_schedule: squaredcos_cap_v2
    clip_sample: True
    set_alpha_to_one: True
    steps_offset: 0
    prediction_type: sample

  # noise_scheduler:
  #   _target_: diffusers.schedulers.scheduling_ddim.DDIMScheduler
  #   num_train_timesteps: 100
  #   beta_start: 0.0001
  #   beta_end: 0.02
  #   # beta_schedule is important
  #   # this is the best we found
  #   beta_schedule: squaredcos_cap_v2
  #   clip_sample: True
  #   set_alpha_to_one: True
  #   steps_offset: 0
  #   prediction_type: sample # or epsilon

  obs_encoder:
    _target_: diffusion_policy.model.vision.multi_image_obs_encoder.MultiImageObsEncoder
    shape_meta: ${shape_meta}
    rgb_model:
      _target_: diffusion_policy.model.vision.model_getter.get_resnet
      name: resnet18
      weights: null
    resize_shape: null
    crop_shape: [76, 76]
    # constant center crop
    random_crop: True
    use_group_norm: True
    share_rgb_model: False
    imagenet_norm: True

  horizon: ${horizon}
  n_action_steps: ${eval:'${n_action_steps}+${n_latency_steps}'}
  n_obs_steps: ${n_obs_steps}
  num_inference_steps: 10  # DDIM
  num_inference_timesteps: 1 # LCM
  obs_as_global_cond: ${obs_as_global_cond}
  # crop_shape: null
  diffusion_step_embed_dim: 128
  down_dims: [512, 1024, 2048]
  kernel_size: 5
  n_groups: 8
  cond_predict_scale: True

ema:
  _target_: diffusion_policy_3d.model.diffusion.ema_model.EMAModel
  update_after_step: 0
  inv_gamma: 1.0
  power: 0.75
  min_value: 0.0
  max_value: 0.9999

dataloader:
  batch_size: 1024 #128 #4096
  num_workers: 32 #100
  shuffle: True
  pin_memory: True
  persistent_workers: False

val_dataloader:
  batch_size: 1024 #128 # 4096
  num_workers: 32 #100
  shuffle: False
  pin_memory: True
  persistent_workers: False

output_dir: /home/clear/stochastic_consistency_policy/diffusion_policy_stanford/outputs/student_debug

optimizer:
  _target_: torch.optim.AdamW
  lr: 5.0e-5
  betas: [0.95, 0.999]
  eps: 1.0e-8
  weight_decay: 1.0e-6

training:
  device: "cuda:0"
  seed: 42
  debug: True #False
  resume: True
  lr_scheduler: cosine
  lr_warmup_steps: 500
  num_epochs: 3000 # 3000
  gradient_accumulate_every: 1
  use_ema: True
  rollout_every: 50 #200
  checkpoint_every: 50 #200
  val_every: 50 #1
  sample_every: 50 #5
  val_sample_every: 50
  max_train_steps: null
  max_val_steps: null
  tqdm_interval_sec: 1.0
  max_grad_norm: 1.0
  ema_decay: 0.95

logging:
  group: ${exp_name}
  id: null
  mode: offline
  name: CMStudent-debug
  project: ManiCM-CMStudent
  resume: True #False
  tags:
  - manicm
  - robomimic

checkpoint:
  save_ckpt: True # if True, save checkpoint every checkpoint_every
  topk:
    monitor_key: test_mean_score
    mode: max
    k: 5
    format_str: 'epoch={epoch:04d}-test_mean_score={test_mean_score:.3f}.ckpt'
  save_last_ckpt: True # this only saves when save_ckpt is True
  save_last_snapshot: False

multi_run:
  run_dir: data/outputs/${now:%Y.%m.%d}/${now:%H.%M.%S}_${name}_${task_name}
  wandb_name_base: ${now:%Y.%m.%d-%H.%M.%S}_${name}_${task_name}

hydra:
  job:
    override_dirname: ${name}
  run:
    dir: data/outputs/${now:%Y.%m.%d}/${now:%H.%M.%S}_${name}_${task_name}
  sweep:
    dir: data/outputs/${now:%Y.%m.%d}/${now:%H.%M.%S}_${name}_${task_name}
    subdir: ${hydra.job.num}
